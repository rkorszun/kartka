{"version":3,"sources":["components/CardGrid.tsx","components/VideoPlayer.tsx","components/Greetings.tsx","App.tsx","index.tsx"],"names":["CardGrid","_ref","cards","flippedCards","handleCardClick","React","createElement","Fragment","className","map","card","key","id","concat","includes","onClick","type","getIcon","VideoPlayer","onVideoEnd","useEffect","timer","setTimeout","clearTimeout","src","title","frameBorder","allow","allowFullScreen","Greetings","initialCards","shuffleArray","array","sort","Math","random","App","setCards","useState","setFlippedCards","foundTrees","setFoundTrees","showVideo","setShowVideo","showGreetings","setShowGreetings","requestFullscreen","elem","document","documentElement","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.044845bc.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Card {\n  id: number;\n  type: string;\n}\n\ninterface CardGridProps {\n  cards: Card[];\n  flippedCards: number[];\n  handleCardClick: (id: number, type: string) => void;\n}\n\nconst CardGrid: React.FC<CardGridProps> = ({ cards, flippedCards, handleCardClick }) => {\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'tree':\n        return '🎄';\n      case 'santa':\n        return '🎅';\n      case 'sleigh':\n        return '🛷';\n      case 'snowflake':\n        return '❄️';\n      default:\n        return '🎁'; // Gift icon for default case\n    }\n  };\n\n  return (\n    <>\n      <p className=\"hint\">Znajdź 3 choinki</p>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <div\n            key={card.id}\n            className={`card ${flippedCards.includes(card.id) ? 'flipped' : ''}`}\n            onClick={() => handleCardClick(card.id, card.type)}\n          >\n            {flippedCards.includes(card.id) ? (\n              <span>{getIcon(card.type)}</span>\n            ) : (\n              <span>🎁</span> // Gift icon for hidden cards\n            )}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default CardGrid;\n","import React, { useEffect } from 'react';\n\ninterface VideoPlayerProps {\n  onVideoEnd: () => void;\n}\n\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({ onVideoEnd }) => {\n  useEffect(() => {\n    const timer = setTimeout(onVideoEnd, 21500); // 21.5 seconds\n    return () => clearTimeout(timer);\n  }, [onVideoEnd]);\n\n  return (\n    <div className=\"video-container\">\n      <iframe\n        src=\"https://www.youtube.com/embed/VBKPhxuaU38?autoplay=1\"\n        title=\"Życzenia świąteczne\"\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n","import React from 'react';\n\nconst Greetings = () => {\n  return (\n    <div className=\"greetings-container\">\n      <p>Niech Boża Dziecina błogosławi Tobie i Twoim bliskim, <br/>\n        prowadząc Was przez nadchodzący rok w zdrowiu, szczęściu i obfitości łask.<br/>\n<br/>\nWesołych Świąt Bożego Narodzenia! 🌟</p>\n    </div>\n  );\n};\n\nexport default Greetings;\n","/// <reference path=\"./types/custom.d.ts\" />\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CardGrid from './components/CardGrid';\nimport VideoPlayer from './components/VideoPlayer';\nimport Greetings from './components/Greetings';\n\nconst initialCards = [\n  { id: 1, type: 'tree' },\n  { id: 2, type: 'tree' },\n  { id: 3, type: 'tree' },\n  { id: 4, type: 'santa' },\n  { id: 5, type: 'sleigh' },\n  { id: 6, type: 'snowflake' },\n  { id: 7, type: 'santa' },\n  { id: 8, type: 'sleigh' },\n  { id: 9, type: 'snowflake' },\n];\n\nconst shuffleArray = (array: any[]) => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst App = () => {\n  const [cards, setCards] = useState(shuffleArray([...initialCards]));\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [foundTrees, setFoundTrees] = useState<number>(0);\n  const [showVideo, setShowVideo] = useState<boolean>(false);\n  const [showGreetings, setShowGreetings] = useState<boolean>(false);\n\n  useEffect(() => {\n    setCards(shuffleArray([...initialCards]));\n  }, []);\n\n  useEffect(() => {\n    if (foundTrees >= 3) {\n      setTimeout(() => {\n        setShowVideo(true);\n        requestFullscreen();\n      }, 500);\n    }\n  }, [foundTrees]);\n\n  const handleCardClick = (id: number, type: string) => {\n    if (flippedCards.includes(id)) return;\n\n    setFlippedCards([...flippedCards, id]);\n\n    if (type === 'tree') {\n      setFoundTrees(foundTrees + 1);\n    }\n  };\n\n  const requestFullscreen = () => {\n    const elem = document.documentElement;\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.mozRequestFullScreen) { // Firefox\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) { // Chrome, Safari and Opera\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) { // IE/Edge\n      elem.msRequestFullscreen();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {showGreetings ? (\n          <Greetings />\n        ) : showVideo ? (\n          <VideoPlayer onVideoEnd={() => setShowGreetings(true)} />\n        ) : (\n          <CardGrid cards={cards} flippedCards={flippedCards} handleCardClick={handleCardClick} />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}